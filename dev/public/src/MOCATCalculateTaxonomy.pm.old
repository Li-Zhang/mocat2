package MOCATCalculateTaxonomy;
use strict;
use warnings;
use MOCATCore;
use MOCATVariables;

# This code is part of the MOCAT analysis pipeline
# Code is (c) Copyright EMBL and BGI, 2012-2013
# This code is released under GNU GPL v3.
sub create_job {
	my $job        = shift;
	my $processors = shift;
	my $jobfile    = "$jobdir/MOCATJob_$job\_$date";
	$ZIP =~ s/pigz.*/pigz -p $processors/;
	open JOB, '>', "$jobfile" or die "ERROR & EXIT: Cannot open $jobfile for writing.";

	my $warnings = 0;
	print localtime() . ": Creating $job jobs...\n";
	my $temp_dir = MOCATCore::determine_temp( ( 200 * 1024 * 1024 ) );
	my $print_rownames_file;
	my $read_type = 'screened';

	MOCATCore::mkdir_or_die($rownames_dir);

	if ($use_extracted_reads) {
		$read_type = 'extracted';
	}

	# This was stored in the config previously, now we require the files to be DB specific
	my $databases = join( "_AND_", @do_calculate_taxonomy );
	my $old = '';
	if ($use_old_version) {
		$old = '.old';
	}
	my $taxo_profiling_map            = "$data_dir/$databases.refmg.map$old";
	my $taxo_profiling_map_tot_len    = "$data_dir/$databases.refmg.map$old.total_length";
	my $taxo_profiling_motu_map       = "$data_dir/$databases.motu.map$old";
	my $taxo_profiling_functional_map = "$data_dir/$databases.functional.map";
	my $profile_type;

	print localtime() . ": Checking mode...";
	if ( $taxo_profiling_mode eq 'RefMG' ) {
		( -e "$taxo_profiling_map_tot_len" ) or die "\nERROR & EXIT: Missing len file $taxo_profiling_map_tot_len";
		my @tmp = `awk -F\"\\t\" '{print NF}' $taxo_profiling_map_tot_len | sort -u`;
		foreach my $tmp (@tmp) {
			chomp($tmp);
			( $tmp eq '2' ) or die "\nERROR & EXIT: Length file doesn't have exactly 2 columns on all lines.";
		}
		$profile_type = "taxonomic";
		( -e "$taxo_profiling_map" ) or die "\nERROR & EXIT: Missing map file $taxo_profiling_map";
	}
	elsif ( $taxo_profiling_mode eq 'mOTU' ) {
		$taxo_profiling_map = $taxo_profiling_motu_map;
		$profile_type       = "motu";
		( -e "$taxo_profiling_map" ) or die "\nERROR & EXIT: Missing map file $taxo_profiling_map";
	}
	elsif ( $taxo_profiling_mode eq 'none' ) {
		$profile_type = "none";
	}
	elsif ( $taxo_profiling_mode eq '' ) {
		$profile_type        = "none";
		$taxo_profiling_mode = 'none';
	}
	elsif ( $taxo_profiling_mode eq 'functional' && $PUBLIC == 0 ) {
		$taxo_profiling_map = $taxo_profiling_functional_map;
		$profile_type       = "functional";
		( -e "$taxo_profiling_map.eggnog" ) or die "\nERROR & EXIT: Missing map file $taxo_profiling_map.eggnog";
	}
	elsif ( $taxo_profiling_mode eq 'identifier' ) {
		$profile_type = "identifier";
	}
	else {
		die "\nERROR & EXIT: -mode $taxo_profiling_mode is an incorrect mode!";
	}
	print " OK!\n";

	my @mtfl;
	my $map_reads_to_filelist = 0;
	my $assembly_type         = 'assembly';
	my $end;
	if (         $databases[0] eq 's'
		|| $databases[0] eq 'c'
		|| $databases[0] eq 'f'
		|| $databases[0] eq 'r' )
	{
		$print_rownames_file   = 'yes';
		$map_reads_to_filelist = 1;
		if ( $databases[0] eq 's' ) { $end = 'scaftig' }
		if ( $databases[0] eq 'c' ) { $end = 'contig' }
		if ( $databases[0] eq 'f' ) { $end = 'scafSeq' }
		if ( $databases[0] eq 'r' ) {
			$assembly_type = 'assembly.revised';
			$end           = 'scaftig';
		}
		foreach my $sample (@samples) {
			my $file;
			( my $max, my $avg, my $kmer ) = MOCATCore::get_kmer( $sample, $reads, "-r" );
			if ( $reads eq 'reads.processed' ) {
				$file = "$cwd/$sample/$assembly_type.$reads.$conf{MOCAT_data_type}.K$kmer/$sample.$assembly_type.$reads.$conf{MOCAT_data_type}.K$kmer.$end";
			}
			else {
				$file = "$cwd/$sample/$assembly_type.$reads.$conf{MOCAT_data_type}.K$kmer/$sample.$assembly_type.$reads.$conf{MOCAT_data_type}.K$kmer.$end";
			}
			( -e "$file.gz" ) or die "\nERROR & EXIT: Missing $end file: $file.gz";
			print JOB "$ZIP -dc $file.gz > $file && ";
			push @mtfl, $file;
		}
	}
	### JOB SPECIFIC ###
	# Check .coord file, if it doesn't exist, create it from the .len file. If the .len file doesn't exists, create that and the .coord file.
	if ( !$map_reads_to_filelist ) {
		foreach my $databases (@databases) {
			unless ( -e "$data_dir/$databases.coord" ) {
				unless ( -e "$data_dir/$databases.len" ) {
					unless ( -e "$data_dir/$databases" ) {
						die "\nERROR & EXIT: $data_dir/$databases does not exist. Cannot create .len and .coord files";
					}
					print "\n" . localtime() . ": Creating length file $data_dir/$databases.len...";
					system "$scr_dir/MOCATFilter_falen.pl -infile $data_dir/$databases -outfile $data_dir/$databases.len";
					print " OK!";
				}
				print "\n" . localtime() . ": Creating $data_dir/$databases.coord, and then continue...";

				if ( $systemType =~ m/Darwin/ ) {
					system "sed \'s/[[:space:]]/	1	/\' $data_dir/$databases.len > $data_dir/$databases.coord";
				}
				else {
					system "sed \'s/\\t/\\t1\\t/\' $data_dir/$databases.len > $data_dir/$databases.coord";
				}

				unless ( -e "$data_dir/$databases.coord" ) {
					print localtime() . ": Error creating .coord file\n";
					die "ERROR & EXIT: Could not create $data_dir/$databases.coord from $data_dir/$databases.len\nDoes the system have write permission?";
				}
			}
		}
	}
	my $counter = -1;
	foreach my $sample (@samples) {
		MOCATCore::mkdir_or_die("$temp_dir/$sample/temp");

		my ( $max, $avg, $kmer );
		if ($map_reads_to_filelist) {
			( $max, $avg, $kmer ) = MOCATCore::get_kmer( $sample, $reads, "-mr" );
		}
		$counter++;
		my $folder_filtered;
		my $input_folder;
		my $LOG = " 2>> $cwd/logs/$job/samples/MOCATJob_$job.$sample.$date.log >> $cwd/logs/$job/samples/MOCATJob_$job.$sample.$date.log ";
		my ( $output, $outputTax, $outputTaxRownames, $fullname );
		if ($map_reads_to_filelist) {
			$fullname = $mtfl[$counter];
			my @parts = split '/', $fullname;
			$databases         = $parts[-1];
			$output            = "$sample.filtered.$reads.on.$end.$assembly_type.K$kmer.$conf{MOCAT_data_type}.$conf{MOCAT_mapping_mode}.l$conf{filter_length_cutoff}.p$conf{filter_percent_cutoff}";
			$outputTax         = "$sample.$profile_type.profile.$reads.on.$end.$assembly_type.$conf{MOCAT_data_type}.$conf{MOCAT_mapping_mode}.l$conf{filter_length_cutoff}.p$conf{filter_percent_cutoff}";
			$outputTaxRownames = "$sample_file_basename.$profile_type.profile.$reads.on.$end.$assembly_type.$conf{MOCAT_data_type}.$conf{MOCAT_mapping_mode}.l$conf{filter_length_cutoff}.p$conf{filter_percent_cutoff}.rownames";
			$folder_filtered   = "$cwd/$sample/reads.filtered.$end.$assembly_type.K$kmer.$conf{MOCAT_data_type}";
			$input_folder      = "$cwd/$sample/reads.filtered.$end.$assembly_type.K$kmer.$conf{MOCAT_data_type}";
		}
		else {
			$fullname            = "NOFILE";
			$print_rownames_file = $databases;
			$output              = "$sample.filtered.$read_type.$reads.on.$databases.$conf{MOCAT_data_type}.$conf{MOCAT_mapping_mode}.l$conf{filter_length_cutoff}.p$conf{filter_percent_cutoff}";
			$outputTax           = "$sample.$profile_type.profile.$read_type.$reads.on.$databases.$conf{MOCAT_data_type}.$conf{MOCAT_mapping_mode}.l$conf{filter_length_cutoff}.p$conf{filter_percent_cutoff}";
			$outputTaxRownames   = "$sample_file_basename.$profile_type.profile.$read_type.$reads.on.$databases.$conf{MOCAT_data_type}.$conf{MOCAT_mapping_mode}.l$conf{filter_length_cutoff}.p$conf{filter_percent_cutoff}";
			$folder_filtered     = "$cwd/$sample/reads.filtered.$databases.$conf{MOCAT_data_type}";
			$input_folder        = "$cwd/$sample/reads.filtered.$databases.$conf{MOCAT_data_type}";
		}

		my $folder_coverage = "coverage.$databases.$conf{MOCAT_data_type}";
		my $folder_tax      = "$profile_type.profiles.$databases.$conf{MOCAT_data_type}";
		if ($map_reads_to_filelist) {
			$folder_coverage = "coverage.$databases";
			$folder_tax      = "$profile_type.profiles.$databases";
		}
		my $input;
		if ( $conf{MOCAT_mapping_mode} eq "allbest" ) {
			$input = "$folder_filtered/$output.bam";
		}
		elsif (      $conf{MOCAT_mapping_mode} eq "unique"
			|| $conf{MOCAT_mapping_mode} eq "random" )
		{
			$input = "$folder_filtered/$output.soap.gz";
		}

		my $inserts;
		my $padded_stats_file;
		if ($calculateTaxonomy_previous_calc_coverage_stats_file) {
			if ( $reads eq 'reads.processed' ) {
				$inserts = "$cwd/$sample/stats/$sample.readtrimfilter.after.PE.filter.and.within.padded.region.$conf{MOCAT_data_type}";
			}
			else {
				$inserts = "$cwd/$sample/stats/$sample.$read_type.$reads.after.PE.filter.and.within.padded.region.$conf{MOCAT_data_type}";
			}
		}
		elsif ($calculateTaxonomy_manual_stats_file) {
			$inserts = "$calculateTaxonomy_manual_stats_file.$sample";
		}
		else {
			if ( $reads eq 'reads.processed' ) {
				$inserts = "$cwd/$sample/stats/$sample.readtrimfilter.$conf{MOCAT_data_type}";
			}
			else {
				$inserts = "$cwd/$sample/stats/$sample.$read_type.$reads.$conf{MOCAT_data_type}";
			}
		}
		( -e $input ) or die "\nERROR & EXIT: Missing filtered mapping results file: $input";
		my $covfile = "$cwd/$sample/stats/$sample.coverage.$read_type.$reads.on.$databases.$conf{MOCAT_data_type}.$conf{MOCAT_mapping_mode}.l$conf{filter_length_cutoff}.p$conf{filter_percent_cutoff}.stats";
			
		$padded_stats_file = "$cwd/$sample/stats/$sample.extracted.screened.$reads.on.$databases.after.PE.filter.and.within.padded.region.$conf{MOCAT_data_type}.stats";
		if ( $reads eq 'reads.processed' ) {
			$padded_stats_file = "$cwd/$sample/stats/$sample.extracted.$databases.after.PE.filter.and.within.padded.region.$conf{MOCAT_data_type}.stats";
		}

		my $mmfile = "$cwd/$sample/stats/$sample.coverage.$read_type.$reads.on.$databases.$conf{MOCAT_data_type}.$conf{MOCAT_mapping_mode}.l$conf{filter_length_cutoff}.p$conf{filter_percent_cutoff}.multiplemapper.stats";
		if ($map_reads_to_filelist) {
			$covfile = "$cwd/$sample/stats/$sample.coverage.$reads.on.$end.$assembly_type.$conf{MOCAT_data_type}.$conf{MOCAT_mapping_mode}.l$conf{filter_length_cutoff}.p$conf{filter_percent_cutoff}.stats";
			$mmfile  = "$cwd/$sample/stats/$sample.coverage.$reads.on.$end.$assembly_type.$conf{MOCAT_data_type}.$conf{MOCAT_mapping_mode}.l$conf{filter_length_cutoff}.p$conf{filter_percent_cutoff}.multiplemapper.stats";

		}

		unless ( $profile_type eq 'none' ) {
			MOCATCore::mkdir_or_die("$cwd/$sample/$folder_tax");
		}
		MOCATCore::mkdir_or_die("$cwd/$sample/base.$folder_coverage");
		MOCATCore::mkdir_or_die("$cwd/$sample/insert.$folder_coverage");

		my $addon = "";
		if ($PUBLIC) {
			$addon = ".nf";
		}
	
		my $counterarg = ($map_reads_to_filelist) ? 0 : $counter;
		if ($profiling_SAM) {
			$profiling_SAM = " -sam ";
		} else {
			$profiling_SAM = ""
		}
		print JOB "exec 2>> $cwd/logs/$job/samples/MOCATJob_$job.$sample.$date.log && ";
		print JOB "$scr_dir/MOCATCalculateTaxonomy$addon.pl $profiling_SAM "
		  . "-zcat '$ZCAT' "
		  . "-bin $bin_dir "
		  . "-i $input "
		  . "-s $inserts "
		  . "-sample $sample "
		  . "-cwd $cwd "
		  . "-rcr $reads "
		  . "-dt $conf{MOCAT_data_type} "
		  . "-taxrownames $rownames_dir/$outputTaxRownames "
		  . "-rownames $rownames_dir/$databases.rownames "
		  . "-out $folder_coverage/$output "
		  . "-taxout $cwd/$sample/$folder_tax/$outputTax "
		  . "-match $conf{MOCAT_mapping_mode} "
		  . "-datadir $data_dir "
		  . "-pos $databases "
		  . "-file_list $map_reads_to_filelist "
		  . "-file $fullname "
		  . "-falen $scr_dir/MOCATFilter_falen.pl "
		  . "-covfile $covfile "
		  . "-mmfile $mmfile "
		  . "-map $taxo_profiling_map "
		  . "-len $taxo_profiling_map_tot_len "
		  . "-mode $taxo_profiling_mode "
		  . "-PE_filter $conf{profiling_paired_end_filtering} "
		  . "-counter $counterarg "
		  . "-padded_stats_file $padded_stats_file " . "$LOG";
		if ($map_reads_to_filelist) {
			print JOB "&& rm -f $fullname\n";
		}
		else {
			print JOB "\n";
		}

	}
	close JOB;
	if ($warnings) {
		print <<"EOF";

WARNING! WARNING! WARNING!
Did not find new version of filtered results, but found old version (one example):

$warnings

SO, CURRENTLY USING THIS OLD VERSION FOR CALCULATING COVERAGES!


Please read warnings and press enter to continue.

EOF
		chomp( my $key = <STDIN> );
	}
}

sub post_check_files {
	print localtime() . ": Checking files... ";
	print " OK!\n";
}
1;
