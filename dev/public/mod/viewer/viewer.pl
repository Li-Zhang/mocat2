#!/usr/bin/env perl

# MOCAT Viewer
#
# This script is the MOCAT Viewer software.
# It loads zipped functional and gene profiles
# generated by MOCAT and post processes them in R,
# and presents them using a Shiny interface

use strict;
use warnings;
use Getopt::Long;
use Cwd;

sub system_ {
	my $cmd = shift;
	system($cmd) == 0 or die("\nERROR & EXIT: system($cmd) failed: $!\n");
}

my ($functional, $gene, $map, $rdata, @pathways, $count, $norm, $kegg2name, $taxonomic, $metadata, $grouping, $bin, $ko2pathway, $ko2module);
$bin = './';
$kegg2name = "0";
$taxonomic = "0";
$metadata = "0";
$grouping = "0";


GetOptions(
	   'kegg_profile:s' => \$functional,
	   'gene_profile:s' => \$gene,
	   'functional_map:s' => \$map,
	   'rdata_outfile:s' => \$rdata,
	   'pathways:s{,}' => \@pathways,
	   'count_type:s' => \$count,
	   'normalization:s' => \$norm,
	   'bin_directory:s' => \$bin,
	   'kegg2name_file:s' => \$kegg2name,
	   'ko2module_file:s' => \$ko2module,
	   'ko2pathway_file:s' => \$ko2pathway,
	   'taxonomic_map:s' => \$taxonomic,
	   'metadata_file:s' => \$metadata,
	   'group_samples_by:s' => \$grouping,
	  );

unless ($ko2pathway) {
  $ko2pathway = "$bin/ko2pathway";
}
unless ($ko2module) {
  $ko2module = "$bin/ko2module";
}
unless ($kegg2name) {
  $kegg2name = "$bin/kegg2name";
}
unless (-e $ko2pathway) {
  die "ERROR & EXIT: -ko2pathway_file $ko2pathway does not exist";
}
unless (-e $ko2module) {
  die "ERROR & EXIT: -ko2module_file $ko2module does not exist";
}
unless ($pathways[0]) {
  $pathways[0] = "0";
}
if ($metadata ne "0") {
  unless (-e $metadata) {
    die "ERROR & EXIT: -metadata_file $metadata does not exist";
  }
}
if (!(-e $kegg2name) && $kegg2name ne "$bin/kegg2name") {
    die "ERROR & EXIT: -kegg2name_file $kegg2name does not exist";
  }elsif (!(-e $kegg2name) && $kegg2name eq "$bin/kegg2name") {
$kegg2name = "0"
  }
if ($taxonomic ne "0") {
  unless (-e $taxonomic) {
    die "ERROR & EXIT: -taxonomic_map $taxonomic does not exist";
  }
}
unless ($bin) {
  die "ERROR & EXIT: -bin <bin directory> not specified";
}
unless ($functional) {
  die "ERROR & EXIT: -kegg_profile <KEGG profiles file>.zip not specified";
}
unless ($gene) {
  die "ERROR & EXIT: -gene_profile <gene profiles file>.zip not specified";
}
unless ($map) {
  die "ERROR & EXIT: -functional_map <functional map file> not specified";
}
unless ($rdata) {
  die "ERROR & EXIT: -rdata <save data to this RData file> not specified";
}
unless ($count) {
  die "ERROR & EXIT: -count_type <base|insert> not specified";
}
unless ( $count ne 'base' || $count ne 'insert') {
  die "ERROR & EXIT: -count_type <base|insert> incorrectly specified";
}
unless ($norm) {
  die "ERROR & EXIT: -count_type <raw|norm|scaled> not specified";
}
unless ( $norm ne 'raw' || $count ne 'norm' || $count ne 'scaled') {
  die "ERROR & EXIT: -count_type <raw|norm|scaled> incorrectly specified";
}

unless (-e $functional) {
  die "ERROR & EXIT: -kegg_profile <KEGG profiles file>.zip does not exist";
}
unless (-e $gene) {
  die "ERROR & EXIT: -gene_profile <gene profiles file>.zip does not exist";
}
unless (-e $map) {
  die "ERROR & EXIT: -functional_map <functional map file> does not exist";
}
system_("touch $rdata && rm $rdata");
unless (-e "$bin/server.R") {
  die "ERROR & EXIT: missing $bin/server.R";
}
unless (-e "$bin/ui.R") {
  die "ERROR & EXIT: missing $bin/ui.R";
}
unless (-e "$bin/viewer.R") {
  die "ERROR & EXIT: missing $bin/viewer.R";
}

chomp(my $gene_file = `unzip -l $gene | sed 's/^ *//' | grep "$count.$norm.gene\$" 2>/dev/null | perl -F\"\\s+\" -lane 'print \$F[3]'`);
chomp(my $hor_gene_file = `unzip -l $gene | sed 's/^ *//' | grep "horizontal.gene\$" 2>/dev/null | perl -F\"\\s+\" -lane 'print \$F[3]'`);
chomp(my $functional_file = `unzip -l $functional | sed 's/^ *//' | grep "horizontal.ko\$" | sed "s|.horizontal.ko||" 2>/dev/null | perl -F\"\\s+\" -lane 'print \$F[3]'`);
unless($gene_file) {
  die "ERROR & EXIT: Is the $gene profile a correctly formatted MOCAT gene profile zip file?"
}
unless($hor_gene_file) {
  die "ERROR & EXIT: Is the $gene profile a correctly formatted MOCAT gene profile zip file?"
}
unless($functional_file) {
  die "ERROR & EXIT: Is the $functional profile a correctly formatted MOCAT functional profile zip file?"
}

chomp(@pathways);
my $pathways = join(" ", @pathways);
$pathways =~ s/^\s*//;
$pathways =~ s/\s*$//;
if ($pathways[0] ne "0") {
  if (-e "$rdata." . join(".", sort @pathways) . ".RData" && -e "$rdata.minimal.RData" ) {
    # no need to run preprocess
  } else {
    print STDOUT "Retrieving, preprocessing and storing data\n";
    system_("Rscript $bin/viewer.R \"$gene\" \"$gene_file\" \"$hor_gene_file\" \"$functional\" \"$functional_file\" \"$count.$norm\" \"$rdata\" \"$map\" \"$kegg2name\" \"$taxonomic\" \"$pathways\" \"$kegg2name\" \"$ko2module\" \"$ko2pathway\" ");
  }
} else {
  if (-e "$rdata.all.RData" && -e "$rdata.minimal.RData" ) {
    # no need to run preprocess
  } else {
    print STDOUT "Retrieving, preprocessing and storing data\n";
    system_("Rscript $bin/viewer.R \"$gene\" \"$gene_file\" \"$hor_gene_file\" \"$functional\" \"$functional_file\" \"$count.$norm\" \"$rdata\" \"$map\" \"$kegg2name\" \"$taxonomic\" \"$pathways\" \"$kegg2name\" \"$ko2module\" \"$ko2pathway\" ");
  }
}

print STDOUT "Setting symlinks\n";
if ($pathways[0] ne "0") {
#  system_("ln -fs $rdata.minimal.RData $bin/minimal.RData && ln -fs $rdata." . join(".", sort @pathways) . ".RData $bin/all.RData");
} else {
#  system_("ln -fs $rdata.minimal.RData $bin/minimal.RData && ln -fs $rdata.all.RData $bin/all.RData");
}


print STDOUT "Launching Shiny\n";

if ($metadata ne "") {
  system_("R -e 'load(\"$bin/all.RData\"); METADATA <- \"$metadata\"; GROUPING <- \"$grouping\"; library(\"shiny\"); runApp(\"$bin\")'");
} else {
  system_("R -e 'load(\"$bin/all.RData\"); METADATA <- NULL; GROUPING <- NULL; library(\"shiny\"); runApp(\"$bin\")'");
}


exit 0;
